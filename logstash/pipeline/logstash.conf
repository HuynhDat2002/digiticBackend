input {
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "access"
  }

  file {
    path => "/var/log/nginx/error.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "error"
  }
}

filter {
  if [type] == "access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      tag_on_failure => ["_grokparsefailure_access"]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      timezone => "Asia/Ho_Chi_Minh"
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
    if [response] {

     translate {
      field => "response"
      destination => "response_code_meaning"
      dictionary_path => "/usr/share/logstash/csv/http-status.csv"
      fallback => "Unknown"
      }
    } 
  }

  else if [type] == "error" {
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:loglevel}\] %{POSINT:pid}#%{POSINT:tid}: \*%{POSINT}: %{GREEDYDATA:error_message}"
        ]
      }
      tag_on_failure => ["_grokparsefailure_error"]
    }
    date {
      match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss" ]
      timezone => "Asia/Ho_Chi_Minh"
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }

  if "_grokparsefailure" in [tags] {
    mutate {
      add_tag => ["_grokparsefailure"]
    }
  }

  

}

output {

  if [type] == "access" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "nginx-access-%{+YYYY.MM.dd}"
    }
  }
  else if [type] == "error" {

    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "nginx-error-%{+YYYY.MM.dd}"
    }
  }

  

  stdout { codec => rubydebug }
  
}